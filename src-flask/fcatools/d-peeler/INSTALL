*** Dependencies ***

To run, d-peeler requires the Boost library. Most of GNU/Linux
distributions have it in their repositories. Simply use your package
manager to install it. Notice however that Debian and its derivatives
(including the *buntu) split this library into several packages. If
you run one of them, you must install libboost-dev,
libboost-program-options and libboost-program-options-dev.

To manually install the Boost library (for example if you are running
a proprietary operating system), this Web page may help you:
http://www.boost.org/more/getting_started/index.html


*** Compilation ***

d-peeler was meant to be built with GCC version 4.7 or later. However
one can easily adapt the makefile to use another compiler.

To install d-peeler on a *NIX-like operating system, run (with
administrator privileges):
# make install

If you do not have access to administrator privileges or if you do not
run a *NIX-like operating system, simply run:
$ make
The executable, called d-peeler, is created in the working
directory. You can then move it to a personal directory listed in your
PATH variable.


*** Compilation Options ***

Several options can be easily enabled (respectively disabled) in
Parameters.h by uncommenting (respectively commenting) them:

* OUTPUT turns on the output. This option may be disabled to evaluate
the performances of d-peeler independently from the writing
performances of the disk.

* SORT_ITEMS turns on the heuristic consisting in sorting the
hyper-plan to first consider the least dense. Disabling it
considerably decreases the performance of d-peeler.

* SORT_DIMENSIONS turns on the heuristic consisting in reordering the
dimensions to minimize both the space requirement for the data set and
its access costs.

* ENUMERATION_PROCESS is used to select the procedure aimed at
choosing on which dimension should the next item be enumerated:
0: the chosen dimension is the smallest non-empty one (choice
independent from the past computation)
1: the chosen dimension presents the least dense item (choice
independent from the past computation)
2: the chosen dimension presents the item introducing the more 0
(choice independent from the past computation)
3: the chosen dimension has the smallest number of remaining potential
items
4: the chosen dimension maximizes the quantity of potential items that
may be absent after propagation

* VERBOSE_PARSER turns on the output (on the standard output) of
information when the input data file is parsed.

* DEBUG turns on the output (on the standard output) of information
during the extraction of the closed n-sets. This option may be enabled
by someone who wishes to precisely understand how this extraction is
performed on a small data set.

* VERBOSE_DIM_CHOICE turns on the output (on the standard output) of
information regarding the choice of the next dimension to be
enumerated. Combined with DEBUG, this option may be enabled by someone
who wishes to precisely understand how this choice is performed on a
small data set.

* VERBOSE_HLIST_CHECKING turns on the output (on the standard output)
of information about the verification of the maximality of the
computed patterns. Combined with DEBUG, this option may be enabled by
someone who wishes to precisely understand how this is performed on a
small data set.

* NB_OF_CLOSED_N_SETS turns on the output (on the standard output) of how
many closed n-sets were selected during the extraction phase.

* NB_OF_NODES turns on the output (on the standard output) of how many
patterns were considered during the extraction phase, i.e., the count
of valid (but not always maximal) patterns with regard to the applied
constraints. This option may be enabled by someone who wishes a
measure of the time complexity independent from the hardware
performance.

* PRUNING_DETAILS turns on the output (on the standard output) of a
detailed analysis of how the tree is pruned. This option may be
enabled by someone who wants to have a broad view of the tree
w.r.t. the enumeration process and the data set. It gives (in this
order):
- the binary logarithm of the number of nodes pruned of for
non-maximality
- the binary logarithm of the number of nodes pruned for unsatisfied
minimal size constrainst
- the binary logarithm of the number of nodes pruned for unsatisfied
maximal size constrainst
- the binary logarithm of the number of nodes pruned for unsatisfied
minimal area constrainst
- the binary logarithm of the number of nodes pruned for unsatisfied
maximal area constrainst
- the binary logarithm of the number of nodes pruned for unreached
minimization ratio

* PROPORTION_OF_ABSENT_ITEMS_CHECKED_FOR_MAXIMALITY turns on the
output (on the standard output) of the proportion of absent items
checked for maximality.

* TIME turns on the output (on the standard output) of the running
time of d-peeler.

* DETAILED_TIME turns on the output (on the standard output) of a more
detailed analysis of how the time is spent. It gives (in this order):
- the parsing time
- the mining time
- the post-processing time (if it is a minimization)
- the time spent checking the maximality of the computed patterns
- the time spent propagating the absence of certain items (when
another is set present)

* GNUPLOT modifies the way NB_OF_CLOSED_N_SETS, NB_OF_NODES,
PRUNING_DETAILS, TIME and DETAILED_TIME (in this order) format their
outputs. Instead of being human readable, they are directly
understandable by the famous gnuplot software.

Please notice that some of these options may considerably alter the
performances of d-peeler. For example one could think that
DETAILED_TIME does not really slow d-peeler but it does!